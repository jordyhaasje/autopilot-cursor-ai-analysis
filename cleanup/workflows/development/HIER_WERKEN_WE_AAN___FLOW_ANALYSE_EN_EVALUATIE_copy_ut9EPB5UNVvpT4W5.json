{
  "id": "ut9EPB5UNVvpT4W5",
  "name": "HIER WERKEN WE AAN - FLOW ANALYSE EN EVALUATIE copy",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {
          "readStatus": "unread",
          "sender": "lvbendjong@gmail.com"
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -832,
        176
      ],
      "id": "1d7bed60-0d82-401f-bf43-989cdadc2988",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "zcDQMlj13LLc72wb",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  t.tenant_id,\n  t.bedrijfsnaam,\n  t.ai_persona_name,\n  t.ai_signature_html,\n  t.annulering_toegestaan_dagen,\n  t.adreswijziging_toegestaan_dagen,\n  t.maximaal_extra_compensatie,\n  t.retouradres,\n  JSON_AGG(\n    JSON_BUILD_OBJECT(\n      'rule_key', COALESCE(tbr.rule_key, m.rule_key),\n      'rule_name', m.rule_name,\n      'rule_config', tbr.rule_config,\n      'html_template', tbr.html_template,\n      'category', m.category\n    )\n  ) AS business_rules\nFROM tenants t\nLEFT JOIN tenant_business_rules tbr \n  ON t.tenant_id = tbr.tenant_id\n  AND tbr.is_active = true\nLEFT JOIN master_business_rules m\n  ON m.rule_key = tbr.rule_key\nWHERE t.gmail_email = '{{ $node[\"Email parser\"].json.tenant_email }}'\n  AND t.active = true\nGROUP BY t.tenant_id;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        48,
        64
      ],
      "id": "6e0d5913-8d75-44ef-99e1-fdd45695f7cd",
      "name": "Get tenant data",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  ci.id,\n  ci.thread_id,\n  ci.message_body,\n  ci.ai_response,\n  ci.type,\n  ci.status,\n  ci.compensatie_percentage,\n  ci.ladder_stap,\n  ci.created_at,\n  ct.total_interactions\nFROM conversation_threads ct\nLEFT JOIN customer_interactions ci ON ct.thread_id = ci.thread_id\nWHERE ct.customer_email = '{{ $node[\"Email parser\"].json.customer_email }}'\n  AND ct.tenant_id = (\n    SELECT tenant_id FROM tenants WHERE gmail_email = '{{ $node[\"Email parser\"].json.tenant_email }}'\n  )\nORDER BY ci.created_at DESC\nLIMIT 10;\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        384,
        80
      ],
      "id": "50d4a3a9-59db-4164-a6fc-9ff590f26744",
      "name": "Get Conversation History",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const email   = $node[\"Email body cleaner\"]?.json || {};\nconst tenant  = $node[\"Get tenant data\"]?.json || {};\nconst history = Array.isArray($node[\"Get Conversation History\"]?.json) ? $node[\"Get Conversation History\"].json : [];\nconst klantnaam = $node[\"Klantnaam Extractor\"]?.json?.klantnaam;\nconst thread = $node[\"Conversation Thread Lookup\"]?.json || {};\nconst gen = $node[\"Thread ID Generator\"]?.json || {};\n\nif (!tenant.tenant_id) throw new Error(\"Tenant niet gevonden, check 'Get tenant data' node!\");\nif (!email.customer_email) throw new Error(\"Klant-email niet gevonden, check Email body cleaner node!\");\n\nlet locale = tenant.locale || tenant.taalvoorkeur || 'nl';\nif (typeof locale === 'string') locale = locale.split('-')[0].toLowerCase();\nif (!['nl','en','de'].includes(locale)) locale = 'nl';\n\n// Mood detectie\nconst negativeWordsPerTaal = {\n  nl: [\"niet blij\",\"ontevreden\",\"slecht\",\"teleurgesteld\",\"waardeloos\",\"lang wachten\",\"super lang\",\"erg langzaam\",\"niet tevreden\",\"onvoldoende\",\"te weinig\",\"jammer\",\"helaas\",\"ben niet blij\",\"onacceptabel\",\"onprettig\",\"geen zin\",\"klaar mee\",\"vreselijk\"],\n  en: [\"not happy\",\"dissatisfied\",\"bad\",\"disappointed\",\"poor\",\"waiting too long\",\"super long\",\"very slow\",\"unhappy\",\"insufficient\",\"unfortunately\",\"unacceptable\",\"awful\",\"frustrating\",\"worthless\"],\n  de: [\"nicht zufrieden\",\"schlecht\",\"enttäuscht\",\"wartet zu lange\",\"ärgerlich\",\"nicht genug\",\"leider\",\"schlimm\",\"ärgerlich\"]\n};\nconst body = (email.cleaned_body || email.email_body || \"\").toLowerCase();\nconst negativeWords = negativeWordsPerTaal[locale] || negativeWordsPerTaal.nl;\nconst mood = negativeWords.some(w => body.includes(w)) ? \"negative\" : \"neutral\";\n\n// Conversatie-geschiedenis-analyse\nlet lastHistory = history.filter(x => x?.ai_response || x?.message_body).slice(-10);\nlet offers = [];\nlet highest_offer = 0;\nlet last_accepted_offer = 0;\nlet refusal_count = 0;\nlet thread_status = \"open\";\nfor (const x of lastHistory) {\n  if (typeof x.compensatie_percentage === \"number\") offers.push(x.compensatie_percentage);\n  if (typeof x.compensatie_percentage === \"number\" && x.acceptance_detected) last_accepted_offer = x.compensatie_percentage;\n  if (x.type && [\"compensation\",\"return\"].includes(x.type) && x.refusal_detected) refusal_count++;\n  if (x.ladder_stap && x.ladder_stap > highest_offer) highest_offer = x.compensatie_percentage || highest_offer;\n  if (x.status && [\"resolved\",\"escalated\"].includes(x.status)) thread_status = x.status;\n}\n\n// Business rules\nconst rulesList = tenant.business_rules || [];\nconst rules = Object.fromEntries(rulesList.map(r => [r.rule_key, r.rule_config || {}]));\n\n// Ladder-logica\nconst ladderRaw = rules.compensatie_ladder || {};\nconst ladderCfg = {\n  stappen: ladderRaw.stappen || [15,20,30,40],\n  dreiging_percentage: ladderRaw.dreiging_percentage ?? 50,\n  onderhandeling_marge: ladderRaw.onderhandeling_marge ?? 15,\n  max_totaal_normaal: ladderRaw.max_totaal_normaal ?? 40,\n  max_totaal_dreiging: ladderRaw.max_dreiging_totaal ?? 65,\n  retour_na_weigering: ladderRaw.retour_na_weigering ?? true\n};\nlet ladder_stap = refusal_count+1;\nif (ladder_stap > ladderCfg.stappen.length) ladder_stap = ladderCfg.stappen.length;\nlet huidig_bod = ladderCfg.stappen[ladder_stap-1];\n\n// Business rule detection/scenario\nlet triggered_rules = [];\nfor (const rule of rulesList) {\n  const woorden = [\n    ...(rule?.rule_config?.detectie_woorden || []),\n    ...(rule?.rule_config?.trigger_woorden || []),\n    ...(rule?.rule_config?.trefwoorden || [])\n  ];\n  if (!woorden.length) continue;\n  for (const w of woorden) {\n    if (body.includes(w.toLowerCase())) {\n      triggered_rules.push({\n        key: rule.rule_key,\n        actie: rule.rule_config?.actie,\n        config: rule.rule_config,\n        template: rule.html_template,\n        scenario: rule.rule_key,\n        html_template: rule.html_template\n      });\n      break;\n    }\n  }\n}\n\n// Onderhandeling herkend?\nlet onderhandeling_geaccepteerd = false;\nconst onderhandeling_rule = rulesList.find(r => r.rule_key === \"onderhandeling_logica\");\nif (onderhandeling_rule && onderhandeling_rule.rule_config?.trigger_woorden) {\n  onderhandeling_geaccepteerd = onderhandeling_rule.rule_config.trigger_woorden.some(w => body.includes(w.toLowerCase()));\n}\nlet extra_percentage = onderhandeling_geaccepteerd ? Math.min(ladderCfg.onderhandeling_marge, ladderCfg.max_totaal_normaal - huidig_bod) : 0;\nif (onderhandeling_geaccepteerd) huidig_bod += extra_percentage;\n\n// Dreiging/escalatie gedetecteerd?\nlet dreiging_detected = false;\nconst dreiging_rule = rulesList.find(r => r.rule_key === \"dreiging_detectie\");\nif (dreiging_rule && dreiging_rule.rule_config?.trefwoorden) {\n  dreiging_detected = dreiging_rule.rule_config.trefwoorden.some(w => body.includes(w.toLowerCase()));\n}\n\n// Levertijd dagen (optioneel, voor scenario’s)\nlet days_since_order = null;\nconst daysRegex = /(\\d+)\\s*(dagen|day|days|tage|jour|giorni)/i;\nconst daysMatch = body.match(daysRegex);\nif (daysMatch) days_since_order = parseInt(daysMatch[1]);\n\n// Beginzin\nconst startSentences = {\n  nl: [`Hoi ${klantnaam},`,`Bedankt voor je bericht, ${klantnaam}.`,`Goed dat je contact opneemt, ${klantnaam}.`],\n  en: [`Hi ${klantnaam},`,`Thanks for your message, ${klantnaam}.`,`Good to hear from you, ${klantnaam}.`],\n  de: [`Hallo ${klantnaam},`,`Danke für Ihre Nachricht, ${klantnaam}.`,`Gut, dass Sie sich melden, ${klantnaam}.`]\n};\nconst random = arr => arr[Math.floor(Math.random()*arr.length)];\nconst opening = random(startSentences[locale] || startSentences.nl);\n\n// Output\nreturn {\n  klant_email: email.customer_email,\n  klant_naam: klantnaam,\n  cleaned_body: email.cleaned_body,\n  subject: email.subject,\n  tenant_id: tenant.tenant_id,\n  bedrijfsnaam: tenant.bedrijfsnaam,\n  ai_persona_name: tenant.ai_persona_name,\n  ai_signature_html: tenant.ai_signature_html,\n  annulering_toegestaan_dagen: tenant.annulering_toegestaan_dagen,\n  adreswijziging_toegestaan_dagen: tenant.adreswijziging_toegestaan_dagen,\n  maximaal_extra_compensatie: tenant.maximaal_extra_compensatie,\n  retouradres: tenant.retouradres,\n  locale,\n  mood,\n  refusal_count,\n  ladder_stap,\n  huidig_bod,\n  highest_offer,\n  last_accepted_offer,\n  onderhandeling_geaccepteerd,\n  extra_percentage,\n  dreiging_detected,\n  history: lastHistory,\n  ladder_cfg: ladderCfg,\n  opening,\n  business_rules: rulesList,\n  triggered_rules,\n  days_since_order,\n  thread_status,\n  _debug: {from_nodes:{email_keys:Object.keys(email),tenant_keys:Object.keys(tenant),history_count:history.length},triggered_rules:triggered_rules.map(t=>t.key),time:new Date().toISOString()}\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        480
      ],
      "id": "a9808c52-b023-425e-9d7d-6cd247685458",
      "name": "AI Context Builder",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "function safeParse(x){ if (typeof x !== 'string') return x; try{ return JSON.parse(x); } catch{ return {}; } }\n\nconst raw = $node[\"Message a model1\"].json;\nconst content = raw?.choices?.[0]?.message?.content;\nif (!content) throw new Error(\"Geen AI-payload!\");\nconst payload = (typeof content === \"object\") ? content : safeParse(content);\n\nconst contextBuilder = $node[\"AI Context Builder\"].json || {};\nconst fallbackRefusal = contextBuilder.aiRefusalFallback === true;\nconst days = contextBuilder.days ?? null;\nconst conversation = contextBuilder.conversation || [];  // <--- Toevoegen!\n\n// Thread/DB\nconst upsert = $node[\"Conversation Thread Upsert\"].json || {};\nconst thread_id = upsert.thread_id || $node[\"Thread ID Generator\"].json.thread_id;\nconst dbTotal   = (typeof upsert.total_interactions === 'number') ? upsert.total_interactions : null;\nconst genCount  = $node[\"Thread ID Generator\"].json.contact_count || 1;\nconst contact_count = dbTotal ?? genCount;\n\n// Tenant/signature\nconst tenant = $node[\"Get tenant data\"].json || {};\nconst persona = tenant.ai_persona_name || 'Eva';\nconst bedrijf = tenant.bedrijfsnaam || '';\nconst signature = `<br>Met vriendelijke groet,<br>${persona}${bedrijf ? ' – ' + bedrijf : ''}`;\n\nlet ai_response = String(payload.ai_response || \"\");\n\n// Voeg retouradres toe bij max_refused\nif ((payload.status || '').toLowerCase() === \"max_refused\") {\n  const addr = tenant.retouradres || \"\";\n  if (addr) {\n    ai_response += `<p>Het retouradres is:<br>${addr}.<br>Let op: de retourkosten zijn voor de klant.</p>`;\n  }\n}\n\n// voorkom dubbele sign-off\nconst norm = ai_response.replace(/\\s+/g,' ').toLowerCase();\nconst normSig = signature.replace(/\\s+/g,' ').toLowerCase();\nif (!norm.includes(normSig)) ai_response += signature;\n\n// refusal_detected: AI is leidend, maar keyword fallback vangt alles op!\nlet refusal_detected = payload.refusal_detected === true || fallbackRefusal;\n\nreturn [{\n  json: {\n    ai_response,\n    status: (payload.status || \"processed\").toLowerCase(),\n    type: (payload.type   || \"general\").toLowerCase(),\n    compensatie_percentage: payload.compensatie_percentage ?? null,\n    ladder_stap: payload.ladder_stap ?? 1,\n    mood_detected: payload.mood_detected ?? null,\n    refusal_detected,\n    interpretation: payload.interpretation || \"\",\n    days,\n    confidence_score: payload.confidence_score ?? 0,\n    alert_type: payload.alert_type ?? null,\n    next_action: payload.next_action || \"await_response\",\n    thread_id,\n    contact_count,\n    tenant_id: tenant.tenant_id,\n    klantnaam: payload.klantnaam || contextBuilder.klantnaam || null,\n    conversation, // <-- Belangrijk!\n    original_email: $node[\"Email body cleaner\"].json\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        256
      ],
      "id": "1212b76b-7919-41f4-bd3a-b87c7cbb04fd",
      "name": "Response Parser",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f0c30eeb-d06a-4ab4-bffa-3fc30cf841d8",
              "leftValue": "={{$json[\"alert_type\"]}}",
              "rightValue": "=escalated",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": "=",
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3504,
        240
      ],
      "id": "c4c33ebe-82d0-4cbf-b52a-4d200ef4689a",
      "name": "If",
      "alwaysOutputData": false,
      "retryOnFail": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "sendTo": "={{ $node[\"Email parser\"].json.customer_email }}",
        "subject": "={{ $node[\"Email parser\"].json.subject }}",
        "message": "<p>We hebben uw bericht ontvangen en escaleren dit naar onze manager. U hoort binnen 24 uur van ons.</p>",
        "options": {},
        "path": "f91f93dd-8f8a-40ba-bb6a-cbec0303e410"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4928,
        80
      ],
      "id": "5fbacc03-9583-40ca-8bc7-962df3eb851a",
      "name": "Gmail Send Escalation",
      "webhookId": "f91f93dd-8f8a-40ba-bb6a-cbec0303e410",
      "alwaysOutputData": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "zcDQMlj13LLc72wb",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO escalations (\n  tenant_id, thread_id, escalation_type, escalation_level, trigger_reason, created_at\n) VALUES (\n  '{{ $json.tenant_id }}'::uuid,\n  '{{ $json.thread_id }}'::uuid,\n  'ai_escalation',\n  COALESCE({{ $json.ladder_stap }}, 0),\n  COALESCE('{{ $json.escalation_reason }}','dreiging'),\n  now()\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4720,
        80
      ],
      "id": "968f4d50-a64e-470b-b6f1-f00545522ce6",
      "name": "Postgres Insert Escalation",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $node[\"Email body cleaner\"].json.customer_email }}",
        "subject": "={{ $node[\"Email body cleaner\"].json.subject }}",
        "message": "={{ $node[\"Response Parser\"].json.ai_response }}",
        "options": {
          "appendAttribution": false,
          "replyToSenderOnly": true
        },
        "path": "232dfc03-5cd1-4148-bb2c-d89ca48b1624"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4800,
        352
      ],
      "id": "efcb0ace-19cf-4a83-b048-9925775ae9ab",
      "name": "Gmail Send Normal",
      "webhookId": "232dfc03-5cd1-4148-bb2c-d89ca48b1624",
      "alwaysOutputData": false,
      "retryOnFail": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "zcDQMlj13LLc72wb",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO customer_interactions (\n  tenant_id,\n  thread_id,\n  customer_email,\n  contact_count,\n  message_body,\n  ai_response,\n  status,\n  type,\n  compensatie_percentage,\n  ladder_stap,\n  escalation_reason,\n  mood_detected,\n  confidence_score,\n  refusal_detected,\n  interpretation,\n  klantnaam,\n  days,\n  created_at,\n  metadata\n) VALUES (\n  '{{$json.tenant_id}}'::uuid,\n  '{{$json.thread_id}}'::uuid,\n  '{{$json.customer_email}}',\n  {{$json.contact_count}},\n  '{{$json.message_body}}',\n  '{{$json.ai_response}}',\n  '{{$json.status}}',\n  '{{$json.type}}',\n  {{$json.compensatie_percentage}},\n  {{$json.ladder_stap}},\n  {{ $json.escalation_reason ? (\"'\" + $json.escalation_reason.replace(\"'\", \"''\") + \"'\") : \"NULL\" }},\n  {{ $json.mood_detected ? (\"'\" + $json.mood_detected.replace(\"'\", \"''\") + \"'\") : \"NULL\" }},\n  {{$json.confidence_score}},\n  {{$json.refusal_detected}},\n  {{ $json.interpretation ? (\"'\" + $json.interpretation.replace(\"'\", \"''\") + \"'\") : \"NULL\" }},\n  {{ $json.klantnaam ? (\"'\" + $json.klantnaam.replace(\"'\", \"''\") + \"'\") : \"NULL\" }},\n  {{ $json.days !== null && $json.days !== '' ? $json.days : \"NULL\" }},\n  NOW(),\n  '{{$json.metadata ? JSON.stringify($json.metadata) : \"{}\"}}'::jsonb\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4512,
        368
      ],
      "id": "fb78fff5-6b2a-492e-b430-071a6ef11849",
      "name": "Postgres Store Interaction",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.chatInput }}\n"
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2096,
        464
      ],
      "id": "da6da574-815a-49b5-8149-e9438c490245",
      "name": "Message a model1",
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "4cc05BkVx7V6XeAC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse inkomende Gmail-trigger naar bruikbare velden (+ naam uit From)\nconst email = $input.first().json;\n\nconst fromHeader  = email.From || email.from || \"\";\nconst toHeader    = email.To || email.to || \"\";\nconst nameMatch   = fromHeader.match(/^\"?([^\"<]+?)\"?\\s*<.+>$/);\nconst customer_name = (nameMatch && nameMatch[1]) ? nameMatch[1].trim() : null;\n\nconst match       = fromHeader.match(/<(.+)>/);\nconst customer_email = match ? match[1] : String(fromHeader || \"\").trim();\n\nconst email_body = email.textHtml || email.textPlain || email.snippet || \"\";\nconst subject    = (email.Subject || email.subject || email.snippet || \"Geen onderwerp\").toString().trim();\nconst tenant_email = toHeader || \"\";\nconst email_id   = email.id || email.internalDate;\nconst received_at = new Date().toISOString();\n\nreturn [{\n  json: {\n    tenant_email,\n    customer_email,\n    customer_name,\n    email_body,\n    subject,\n    email_id,\n    received_at\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        80
      ],
      "id": "1cd168e1-f9cb-474f-84a7-0f7304ea4e6b",
      "name": "Email parser",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "function uuidv4(){\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c=>{\n    const r = Math.random()*16|0, v = c==='x'? r : (r&0x3|0x8);\n    return v.toString(16);\n  });\n}\n\nconst lookup = $node[\"Conversation Thread Lookup\"].json;\nlet thread_id, is_new_thread, contact_count;\n\nif (Array.isArray(lookup) && lookup[0]?.thread_id) {\n  thread_id = lookup[0].thread_id;\n  const total = Number(lookup[0].total_interactions || 0);\n  contact_count = total + 1;   // volgende contact\n  is_new_thread = false;\n} else {\n  thread_id = uuidv4();\n  contact_count = 1;\n  is_new_thread = true;\n}\n\nreturn [{ json: { thread_id, is_new_thread, contact_count } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        112
      ],
      "id": "4c9bd396-4d40-4fb6-a224-3b8f089aeeba",
      "name": "Thread ID Generator",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_threads (\n  customer_email,\n  tenant_id,\n  thread_id,\n  total_interactions,\n  last_contact_date,\n  customer_name\n) VALUES (\n  '{{$node[\"Email body cleaner\"].json.customer_email}}',\n  '{{$node[\"Get tenant data\"].json.tenant_id}}'::uuid,\n  '{{$node[\"Thread ID Generator\"].json.thread_id}}'::uuid,\n  1,\n  NOW(),\n  '{{$node[\"Klantnaam Extractor\"].json.klantnaam}}'\n)\nON CONFLICT (customer_email, tenant_id) DO UPDATE\nSET\n  total_interactions = conversation_threads.total_interactions + 1,\n  last_contact_date  = NOW(),\n  customer_name = EXCLUDED.customer_name,\n  updated_at = NOW()\nRETURNING\n  conversation_threads.thread_id,\n  conversation_threads.total_interactions;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1696,
        144
      ],
      "id": "cc2e4a2c-29f4-4d37-876f-61e86a6d4660",
      "name": "Conversation Thread Upsert",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT thread_id, total_interactions\nFROM conversation_threads\nWHERE tenant_id = '{{ $node[\"Get tenant data\"].json.tenant_id }}'::uuid\n  AND lower(customer_email) = lower('{{ $node[\"Email body cleaner\"].json.customer_email }}')\nORDER BY last_contact_date DESC\nLIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        752,
        80
      ],
      "id": "d05144f0-babe-4f07-ac50-e00bf56ceb20",
      "name": "Conversation Thread Lookup",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2480,
        336
      ],
      "id": "a044f210-ed2e-4df6-b74e-0c34e56669d1",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $node[\"Email body cleaner\"].json.email_id }}",
        "path": "62cbaef8-66e9-4547-b065-4d27d9a8f744"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        5008,
        352
      ],
      "id": "b96af014-cee5-45de-b98a-24f8e84f6140",
      "name": "Mark a message as read",
      "webhookId": "62cbaef8-66e9-4547-b065-4d27d9a8f744",
      "credentials": {
        "gmailOAuth2": {
          "id": "zcDQMlj13LLc72wb",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let input = $node[\"Email parser\"]?.json;\nif (!input) throw new Error(\"Email parser heeft geen output!\");\nlet html = input.email_body || \"\";\n\n// Quotes/Gmail reply blokken strippen\nhtml = html\n  .replace(/<blockquote[\\s\\S]*?<\\/blockquote>/gi, \"\")\n  .replace(/<div class=\"gmail_quote\"[\\s\\S]*?$/gi, \"\");\n\n// \"On ... wrote/schreef:\"\nhtml = html.replace(/On .* (wrote|schreef):[\\s\\S]*/i, \"\");\n\n// HTML → plain text, quotes weg\nlet text = html\n  .replace(/<style[\\s\\S]*?<\\/style>/gi, \"\")\n  .replace(/<script[\\s\\S]*?<\\/script>/gi, \"\")\n  .replace(/<[^>]+>/g, \" \")\n  .replace(/^[>].*$/gmi, \"\")\n  .replace(/\\s{2,}/g, \" \")\n  .trim();\n\nfor (const r of [\n  /-{2,}\\s*Original Message\\s*-{2,}/i,\n  /-{2,}\\s*Oorspronkelijk bericht\\s*-{2,}/i\n]) { if (r.test(text)) { text = text.split(r)[0].trim(); break; } }\n\nreturn [{\n  json: {\n    ...input,\n    cleaned_body: text\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        272
      ],
      "id": "f84e891e-7f23-46f2-9a5c-b9a5a65d5d33",
      "name": "Email body cleaner",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO notifications (tenant_id, thread_id, type, payload, created_at)\nSELECT\n  '{{ $json.tenant_id }}'::uuid,\n  '{{ $json.thread_id }}'::uuid,\n  {{ $json.alert_type ? \"'\" + $json.alert_type + \"'\" : \"NULL\" }},\n  jsonb_build_object(\n    'status', '{{ $json.status }}',\n    'type',   '{{ $json.type }}',\n    'compensatie_percentage', COALESCE({{ $json.compensatie_percentage }}, 0),\n    'ladder_stap', COALESCE({{ $json.ladder_stap }}, 1),\n    'customer_email', '{{ $node[\"Email body cleaner\"].json.customer_email }}',\n    'subject', '{{ $node[\"Email body cleaner\"].json.subject }}'\n  ),\n  now()\nWHERE {{ $json.alert_type ? 'true' : 'false' }};\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4224,
        144
      ],
      "id": "88c97777-ec2b-403b-bf3a-685c2f645171",
      "name": "Postgres Insert Notification",
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const email = $node[\"Email body cleaner\"].json || {};\nconst bodyText = email.cleaned_body || email.email_body || \"\";\n\nlet klantnaam = null;\nconst afsluitRegex = /(groetjes|met vriendelijke groet|vriendelijke groet|mvg|gr)[,:\\-\\s]+([A-Za-zÀ-ÿ\\- ]+)/i;\nconst afsluitMatch = bodyText.match(afsluitRegex);\nif (afsluitMatch && afsluitMatch[2]) {\n  klantnaam = afsluitMatch[2].trim();\n}\nif (!klantnaam && email.detected_signature_name) klantnaam = email.detected_signature_name.trim();\nif (!klantnaam && email.customer_name) klantnaam = email.customer_name.trim();\nif (!klantnaam) klantnaam = (email.customer_email || \"\").split(\"@\")[0];\n\nreturn [{ json: { klantnaam } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        112
      ],
      "id": "fc076573-cc07-4a17-92b4-d0e7128d5e99",
      "name": "Klantnaam Extractor",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE conversation_threads\nSET\n  conversation_context = '{{ $node[\"Response Parser\"].json.conversation ? JSON.stringify($node[\"Response Parser\"].json.conversation) : \"[]\" }}'\nWHERE\n  tenant_id = '{{ $node[\"Response Parser\"].json.tenant_id }}'::uuid\n  AND thread_id = '{{ $node[\"Response Parser\"].json.thread_id }}'::uuid;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3136,
        256
      ],
      "id": "0fb18427-040f-4f07-9041-b85ac8bafc19",
      "name": "Conversation Thread Context Update",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0d5d3563-cdb0-44fc-96f8-545ef6857a54",
              "name": "=chatInput",
              "value": "=Je bent {{$json[\"ai_persona_name\"]}}, professionele klantenservice van {{$json[\"bedrijfsnaam\"]}}.  \nBeantwoord alle mails persoonlijk en menselijk, nooit robotisch. Gebruik altijd de juiste aanspreekvorm ({{$json[\"klant_naam\"]}}), en sluit af met deze handtekening: {{$json[\"ai_signature_html\"]}}.\n\nGESPREKSGESCHIEDENIS:\n{{ $json.history.map(h => `${h.ts} - KLANT: ${h.klant} | AI: ${h.ai} (ladder: ${h.ladder}, type: ${h.type}, refusal: ${h.refusal}, accepted: ${h.accepted})`).join('\\n') }}\n\nACTUEEL BERICHT:\n{{$json[\"cleaned_body\"]}}\n\nSITUATIE:\n{{ $json.mood == \"negative\" ? \"Let op: klant is negatief/emotioneel. Toon extra empathie en geduld.\" : \"\" }}\n{{ $json.dreiging_detected ? \"Let op: Dreiging gedetecteerd. Volg strikt het dreigingsbeleid! Bied direct maximaal percentage, geen retour, direct management inschakelen.\" : \"\" }}\n{{ $json.triggered_rules.map(rule => `Scenario: ${rule.scenario}\\nActie: ${rule.actie}\\nTemplate: ${rule.html_template}`).join('\\n') }}\n\nCOMPENSATIE LADDER:\nVorige offers: {{$json.highest_offer}}%, laatst geaccepteerd: {{$json.last_accepted_offer}}%\nHuidige ladderstap: {{$json.ladder_stap}}\nCompensatie ladder: {{$json.ladder_cfg.stappen}}\nOnderhandeling marge: {{$json.ladder_cfg.onderhandeling_marge}}%\n\nREGELS:\n- Bied nooit een lager percentage dan eerder geboden.\n- Accepteer als klant alsnog akkoord gaat met een eerder bod, ook na weigering.\n- Alleen als klant expliciet onderhandelt, mag je 1x maximaal +{{$json.ladder_cfg.onderhandeling_marge}}% extra bieden.\n- Bied geen retour/geld terug vóór maximale ladder-stap ({{$json.ladder_cfg.stappen[$json.ladder_cfg.stappen.length-1]}}%).\n- Toon altijd begrip, werk oplossingsgericht, en reageer nooit robotisch.\n- Sluit altijd af met slechts één vriendelijke afsluiting (HTML via {{$json[\"ai_signature_html\"]}}).\n- Geef antwoord in de juiste taal: {{$json[\"locale\"]}}.\n- Geef bij levertijdvragen altijd aan: “tot 9 werkdagen”. Nooit over dropshipping/backoffice spreken.\n- Vraag nooit \"wat wilt u zelf?\", geef altijd zelf een passend voorstel.\n\nEXTRA CONTEXT:\n{{$json.days_since_order ? \"De klant verwijst naar \"+$json.days_since_order+\" dagen sinds bestelling.\" : \"\"}}\n\nRESPONSE STRUCTUUR:\nGeef als output een JSON-object zoals:\n{\n  \"ai_response\": \"...HTML antwoord...\",\n  \"status\": \"...\",\n  \"type\": \"...\",\n  \"compensatie_percentage\": ...,\n  \"ladder_stap\": ...,\n  \"dreiging_detected\": ...,\n  \"onderhandeling_percentage\": ...,\n  \"mood_detected\": \"...\",\n  \"acceptance_keywords_detected\": ...,\n  \"history_summary\": \"...\",\n  \"metadata\": {...}\n}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1776,
        480
      ],
      "id": "f0ee19fa-c6b8-4c03-a34a-560b7c597540",
      "name": "Prompt Generator",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Vul alles uit de juiste nodes:\nreturn {\n  tenant_id: $node[\"Get tenant data\"].json.tenant_id,\n  thread_id: $node[\"Thread ID Generator\"].json.thread_id,\n  customer_email: $node[\"Email body cleaner\"].json.customer_email,\n  contact_count: $json.contact_count ?? 1,\n  message_body: $node[\"Email body cleaner\"].json.cleaned_body || $node[\"Email body cleaner\"].json.email_body,\n  ai_response: $json.choices?.[0]?.message?.content?.ai_response ?? \"\",\n  status: $json.choices?.[0]?.message?.content?.status ?? \"\",\n  type: (() => {\n    const t = $json.choices?.[0]?.message?.content?.type || \"\";\n    if ([\"general\", \"compensatie\", \"retourverzoek\", \"annulering\", \"adreswijziging\", \"dreiging\", \"levertijd\", \"voorraad\"].includes(t)) return t;\n    if (t.includes(\"compensatie\")) return \"compensatie\";\n    if (t.includes(\"retour\")) return \"retourverzoek\";\n    if (t.includes(\"annul\")) return \"annulering\";\n    if (t.includes(\"adres\")) return \"adreswijziging\";\n    if (t.includes(\"dreig\")) return \"dreiging\";\n    if (t.includes(\"levertijd\")) return \"levertijd\";\n    if (t.includes(\"voorraad\")) return \"voorraad\";\n    return \"general\";\n  })(),\n  compensatie_percentage: $json.choices?.[0]?.message?.content?.compensatie_percentage ?? 0,\n  ladder_stap: $json.choices?.[0]?.message?.content?.ladder_stap ?? 1,\n  escalation_reason: $json.choices?.[0]?.message?.content?.escalation_reason ?? null,\n  mood_detected: $json.choices?.[0]?.message?.content?.mood_detected ?? null,\n  confidence_score: $json.choices?.[0]?.message?.content?.confidence_score ?? 0,\n  refusal_detected: $json.choices?.[0]?.message?.content?.refusal_detected ?? false,\n  interpretation: $json.choices?.[0]?.message?.content?.interpretation ?? \"\",\n  klantnaam: $node[\"Klantnaam Extractor\"]?.json?.klantnaam || $json.klantnaam || null,\n  days: typeof $json.days === \"number\" ? $json.days : null,\n  conversation_context: $json.choices?.[0]?.message?.content?.history_summary ?? null,\n  metadata: $json.choices?.[0]?.message?.content?.metadata ?? {},\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3952,
        368
      ],
      "id": "b6bdf224-91e7-4cb4-9e6c-3379fe887012",
      "name": "Pre-mapping",
      "alwaysOutputData": true
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Email parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get tenant data": {
      "main": [
        [
          {
            "node": "Get Conversation History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Conversation History": {
      "main": [
        [
          {
            "node": "Conversation Thread Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Context Builder": {
      "main": [
        [
          {
            "node": "Prompt Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Parser": {
      "main": [
        [
          {
            "node": "Conversation Thread Context Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Postgres Insert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pre-mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Insert Escalation": {
      "main": [
        [
          {
            "node": "Gmail Send Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Send Normal": {
      "main": [
        [
          {
            "node": "Mark a message as read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Email parser": {
      "main": [
        [
          {
            "node": "Email body cleaner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Thread ID Generator": {
      "main": [
        [
          {
            "node": "Klantnaam Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Thread Upsert": {
      "main": [
        [
          {
            "node": "AI Context Builder",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Thread Lookup": {
      "main": [
        [
          {
            "node": "Thread ID Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Store Interaction": {
      "main": [
        [
          {
            "node": "Gmail Send Normal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Response Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email body cleaner": {
      "main": [
        [
          {
            "node": "Get tenant data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Insert Notification": {
      "main": [
        [
          {
            "node": "Postgres Insert Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Klantnaam Extractor": {
      "main": [
        [
          {
            "node": "Conversation Thread Upsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Thread Context Update": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Generator": {
      "main": [
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pre-mapping": {
      "main": [
        [
          {
            "node": "Postgres Store Interaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Gmail Trigger": {
      "Gmail Trigger": {
        "lastTimeChecked": 1754511238,
        "possibleDuplicates": [
          "198810516d0ce022"
        ]
      }
    }
  },
  "tags": [],
  "versionId": "9744954d-8947-40dd-a430-c094397cfe58",
  "createdAt": "2025-08-08T11:08:15.585Z",
  "updatedAt": "2025-08-08T11:08:15.585Z"
}